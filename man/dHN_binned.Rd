% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dHN_binned.R
\name{dHN_binned}
\alias{dHN_binned}
\alias{dHN_binned_V}
\title{Half-normal distribution for use in \code{nimble} models}
\usage{
dHN_binned_V(x, sigma, Xmax = 100, breaks, log = 0)

dHN_binned(x, sigma, Xmax = 100, breaks, log = 0)
}
\arguments{
\item{x}{distance observations. either a single value (dHN_binned) or a vector of values (dHN_binned_V)}

\item{sigma}{scale of the half-normal distribution}

\item{Xmax}{right truncation distance for integration of the likelihood function}

\item{log}{if TRUE, return the log-likelihood}

\item{Xmin}{left truncation distance for integration of the likelihood function}
}
\description{
\code{dHN_binned} and \code{dHN_binned_V} provide half-normal detection
distributions that can be used directly from R or in \code{nimble}
models.
}
\examples{

#direct invocation of functions from R to evaluate the likelihood
dHN_binned(x=20,  sigma=40, breaks=seq(0, 100, by=25), Xmax=100)
dHN_binned_V(x=c(20, 21, 41, 66),  sigma=40, breaks=seq(0, 100, by=25), Xmax=100)
N=1000
true_y<-runif(N, 0, 100)
#hazard rate truth
sigma_true<-40
#half-normal detection
p_detect<- exp(-true_y^2/sigma_true^2)
plot(p_detect~true_y, type="p")
detect<-rbinom(N, 1, p_detect)
#observations
y<-true_y[detect==1]
nind<-length(y)
hist(y, breaks=20)
distCodeV<-nimbleCode({
 y[1:nind]~dHN_binned_V(sigma, 100, breaks=br[1:6])
 sigma~dunif(10, 70)
 })
#inits and monitors
inits <- function() list(sigma=50)
params <- c("sigma")

#generate some MCMC samples
samples <- nimbleMCMC(
code = distCodeV,
constants = list(y=y, nind=nind, br=seq(0, 100, by=20)), ## the distance data
inits = inits,
monitors = params,
niter = 2000,
nburnin = 1000)

layout(matrix(1:2, nrow=2))
hist(y, freq=FALSE)
lines(x=1:100, y=dHN(1:100, mean(samples[,"sigma"])), col="red")
hist(samples[,"sigma"], col="red")

}
\author{
Michael Scroggie
}
\keyword{hazard}
\keyword{rate}
