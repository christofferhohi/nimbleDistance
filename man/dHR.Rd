% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dHR.R
\name{dHR}
\alias{dHR}
\alias{integralHR}
\alias{dHR_V}
\alias{rHR}
\alias{rHR_V}
\title{Hazard rate distribution for use in \code{nimble} models}
\usage{
integralHR(b = 5, sigma = 30, Xmin, Xmax, point = 0)

dHR(x, b, sigma, Xmax = 100, point = 0, log = 0)

rHR(n, b, sigma, Xmax = 100, point = 0)

dHR_V(x, b, sigma, Xmax = 100, point = 0, log = 0)

rHR_V(n, b, sigma, Xmax = 100, point = 0)
}
\arguments{
\item{b}{shape of the hazard rate function}

\item{sigma}{scale of the hazard rate function}

\item{Xmin}{left truncation distance for integration of the likelihood function}

\item{Xmax}{right truncation distance for integration of the likelihood function}

\item{point}{logical value indicating that point surveys were used rather than line-transects. Defaults to zero.}

\item{x}{distance data. either a single value (dHR) or a vector of values (dHR_V)}

\item{log}{if TRUE, return the log-likelihood}
}
\description{
\code{dHR} and \code{dHR_V} provide hazard-rate detection
distributions that can be used directly from R or in \code{nimble}
models. The corresponding randomisation routines \code{rHR} and \code{rHR_V} generate random distances
from the corresponding hazard-rate distribution.
\code{integralHR} is a helper function for computing the integral for the hazard-rate function with the specified parameters.
}
\examples{

#direct invocation of functions from R to evaluate the likelihood
dHR(x=20, b=1, sigma=40, Xmax=100)
dHR(x=20, b=1, sigma=40, Xmax=100, point=1)

N=500
true_y<-runif(N, 0, 100)
#hazard rate truth
sigma_true<-40
b_true<- 5
#detection
p_detect<- 1-exp(-(true_y/sigma_true)^(-b_true))
plot(p_detect~true_y, type="p")
detect<-rbinom(N, 1, p_detect)
#observations
y<-true_y[detect==1]
rug(y, side=1)
nind<-length(y)
hist(y, breaks=20)
distCodeV<-nimbleCode({
 y[1:nind]~dHR_V(b, sigma, 100, point=0)
 sigma~dunif(10, 70)
 b~dunif(2, 20)
 p_mean<-RintegralHR(b, sigma, 0, 100, point=0)/100
 })
#inits and monitors
inits <- function() list(sigma=50, b=5)
params <- c("sigma", "b", "p_mean")

#generate some MCMC samples
samples <- nimbleMCMC(
code = distCodeV,
constants = list(y=y, nind=nind), ## the distance data
inits = inits,
monitors = params,
niter = 1000,
nburnin = 500)

layout(matrix(1:3, nrow=3))
hist(samples[,"sigma"], col="red", xlab="sigma")
abline(v=sigma_true, col="blue", lwd=2)
hist(samples[,"b"], col="red", xlab="b")
abline(v=b_true, col="blue", lwd=2)
hist(y, freq=FALSE)
lines(x=1:100, y=dHR(1:100, mean(samples[,"b"])), mean(samples[,"sigma"])), col="red")
}
\author{
Michael Scroggie
}
\keyword{hazard}
\keyword{rate}
